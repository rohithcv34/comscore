// Progress Pro 
//
// progressive profiling script for Eloqua 10
// Copyright 2011 KPA LLC
// Written by Eli Snyder <esnyder@kpaonline.com>
//
// Licensed under the GPL, see https://github.com/jquery/jquery/blob/master/GPL-LICENSE.txt
// Progress Pro is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2 of the License, or (at your option) any
// later version.

var debugProgressPro = 0;
var progressProAutoSubmit = 0;


// POPULATE FIELDS BY USING ELOQUA DATA LOOKUPS
function popByEmail(formId, myEmail, poparray, elqDLKey_Email, callback) {
    if(debugProgressPro) console.log('populating fields by email '+myEmail);
    // CLEAR ALL VALUES - EXCEPT FOR CHECKBOXES
	for (i in poparray){
		// FOR CHECKBOXES, DON'T CLEAR THE VALUE BUT UNSET THE CHECKED ATTRIBUTE
		// MULTISELECT CHECKBOXES
		if($('#'+formId+' [name="'+poparray[i]+'[]"]').length>0){
			$('#'+formId+' [name="'+poparray[i]+'[]"]').each(function(){
				$(this).prop('checked',false);
				$(this).attr('checked',false);
			})}
		// REGULAR CHECKBOX
		else if($('#'+formId+' [name="'+poparray[i]+'"]').attr("type")=='checkbox')
			{
				if(debugProgressPro) console.log('reset the single checkbox');
				$('#'+formId+' [name="'+poparray[i]+'"]').prop('checked',false);
				$('#'+formId+' [name="'+poparray[i]+'"]').attr('checked',false);
			}
		// REGULAR INPUT
		else{$('#'+formId+' [name="'+poparray[i]+'"]').val('');}
	}
	if(typeof callback == 'function'){callback();}
  	if(myEmail == ''){return;}
	
	var elqDLLookup = '<C_EmailAddress>'+myEmail+'</C_EmailAddress>';
	var fieldval;
	SetElqContent = function(){
		if(debugProgressPro) console.log('called SetElqContent');
		for (i in poparray){
			fieldval = GetElqContentPersonalizationValue(poparray[i]);
			// FG - CHECK TO SEE IF THE RETURNED STRING IS ACTUALLY AN ARRAY (FOR MULTISELECT FIELDS)
			if(fieldval.indexOf("::") != -1)
				{
					// EXPLODE ARRAY AND LOOP OVER RESULTS
					if(debugProgressPro) console.log('multiselect '+fieldval);
					var fieldvalues = fieldval.split("::");
					for (z = 0; z < fieldvalues.length; z++)
						{
							// FG - LOOP OVER VALUES OF MULTISELECT FIELD AND COMPARE 
							// TO RETURNED SELECTION (FIELDVALUES)
							if(fieldvalues[z]!=""){
								// IF CHECKBOX OR SELECT OPTION
								var multiselect_type=$('#'+formId+' [name="'+poparray[i]+'[]"]');
								
								if(multiselect_type.attr("type")=='checkbox')
									{
										
										$('#'+formId+' [name="'+poparray[i]+'[]"]').each(function(){
										if($(this).attr("value") == fieldvalues[z])
											{ 
												$(this).prop('checked',true); // select if same value
												$(this).attr('checked',true); // select if same value
												if(debugProgressPro) console.log('setting multiselect field '+poparray[i]+'[] to '+fieldvalues[z]);
											}
										});										
									}
								else
									{
										$('#'+formId+' [name="'+poparray[i]+'[]"] option').each(function(){
										if($(this).attr("value") == fieldvalues[z])
											{ 
												$(this).attr("selected",true); // select if same value
												if(debugProgressPro) console.log('setting multiselect field '+poparray[i]+'[] to '+fieldvalues[z]);
											}
										});
									}
							}
						}
				}
			// FG - REGULAR FIELD, SINGLE VALUE
			else{	

				// CHECK TO SEE IF THIS IS A MULTISELECT WITH ZERO OR ONE VALUES CHECKED
				if($('#'+formId+' [name="'+poparray[i]+'[]"]').length > 0){
					if($('#'+formId+' [name="'+poparray[i]+'[]"]').attr("type")=='checkbox')
						{
							$('#'+formId+' [name="'+poparray[i]+'[]"]').each(function(){
								if($(this).attr("value") == fieldval)
									{ 
										$(this).prop('checked',true); // select if same value
										$(this).attr('checked',true); // select if same value
										if(debugProgressPro) console.log('setting multiselect field with 1 sel '+poparray[i]+'[] to '+fieldval);
									}
								});	
						}
					else
						{
							$('#'+formId+' [name="'+poparray[i]+'[]"] option').each(function(){
								if($(this).attr("value") == fieldval)
									{ 
										$(this).attr("selected",true); // select if same value
										if(debugProgressPro) console.log('setting multiselect field with 1 sel '+poparray[i]+'[] to '+fieldval);
									}
								});
						}
					
					}
				// REGULAR FORM FIELDS WITH VALUE ATTR
				else{
					if($('#'+formId+' [name="'+poparray[i]+'"]').attr("type")=='checkbox')
						{
							if(debugProgressPro) console.log('setting single checktbox field '+poparray[i]+' to '+fieldval);
							var value_if_checked=$('#'+formId+' [name="'+poparray[i]+'"]').attr('value');
							
							if(value_if_checked == fieldval){
								$('#'+formId+' [name="'+poparray[i]+'"]').prop('checked',true);
								$('#'+formId+' [name="'+poparray[i]+'"]').attr('checked', true);
							}
						}
					// STANDARD INPUT FIELD
					else{
						if(debugProgressPro) console.log('setting regular field '+poparray[i]+' to "'+fieldval+'"');
						$('#'+formId+' [name="'+poparray[i]+'"]').val(fieldval);}
				}
		}}
		if(typeof callback == 'function'){callback();}
    };
	// FG -  DON'T CALL IF KEY IS EMPTY - AS USED FOR THE "NOT YOU" FUNCTION
	if(elqDLKey_Email!=""){_elqQ.push(['elqDataLookup', elqDLKey_Email, elqDLLookup]);}
}
(function($) {
    $.extend($.expr[':'], {
        focusable: function(element) {
            var nodeName = element.nodeName.toLowerCase(),
                tabIndex = $.attr(element, 'tabindex');
                return (/input|select|textarea|button|object/.test(nodeName)
                     ? !element.disabled
                    : 'a' == nodeName || 'area' == nodeName
                    ? element.href || !isNaN(tabIndex)
                    : !isNaN(tabIndex))
                    // the element and all of its ancestors must be visible
                    // the browser may report that the area is hidden
                    && !$(element)['area' == nodeName ? 'parents' : 'closest'](':hidden').length;
        }
    });
})(jQuery);


//user should call this function. poparray is an array of field ID numbers and corresponding Eloqua database field names
//prepopulate field values from a user-specified array of Eloqua field names
function prePop(formId, poparray, elqDLKey_Cookie, elqDLKey_Email, emailField, visitorEmailField, callback) {
if(debugProgressPro) console.log('calling prepop');

	var n=0;
	
	//if the email field is prefilled, use that value for the email address
	var myEmail = $('#'+formId+' [name="'+emailField+'"]').val();
	
	//set up default personalization function (only populates email)
	GetElqContentPersonalizationValue = function(fieldName){
		if (fieldName == emailField){
			myEmail = $('#'+formId+' [name="'+emailField+'"]').val();
			return myEmail;
		}else{
			return '';
		}
	};
	if(debugProgressPro) console.log('initial email = '+myEmail);
	if (myEmail == '') {
		if(debugProgressPro) console.log('no email');
		// if there is no email address was prefilled, try to obtain it using a data lookup based on the visitor's Eloqua tracking cookie
		if (typeof _elqQ != 'undefined'){
			// set up data lookup variables for cookie-based visitor lookup
			SetElqContent = function() {
				if(debugProgressPro) console.log('calling setElqContent');
				//set email according to cookie
  				myEmail = GetElqContentPersonalizationValue(visitorEmailField);
				popByEmail(formId, myEmail, poparray, elqDLKey_Email, callback);
                if(debugProgressPro) console.log('after cookie lookup, email = '+myEmail);
				return;
			};
			
			if(debugProgressPro) console.log('calling elq js');
	        //FERRY GIJZEL -  DON'T CALL IF KEY IS EMPTY (USED FOR "NOT YOU" FUNCTION)
			if(elqDLKey_Cookie!=""){_elqQ.push(['elqDataLookup', elqDLKey_Cookie, '']);}
	        if(debugProgressPro) console.log('after elq js, myemail='+myEmail);
			// FERRY GIJZEL -  ADDED TO PREVENT SHOWING THE ENTIRE FORM IF NO COOKIE IS SET YET AND EMAIL FIELD IS EMPTY
			popByEmail(formId, myEmail, poparray, elqDLKey_Email, callback);			
			return;
		}
	}
	// EMAIL WAS PREFILLED, USE IT FOR THE FIELD LOOKUP
	else
	{
		//prepopulate fields according to email lookup
		popByEmail(formId, myEmail, poparray, elqDLKey_Email, callback);
		return;
	}
} // prePop


// evaluate whether the hide or show condition is true for an advanced skip rule
function skipCondition(formId, skipOption){
	var did = '#'+formId+' [name="' + skipOption.depends + '"]';
	
	if(debugProgressPro) console.log('Skip Condition on '+$(did).attr('id')+' type:'+$(did).attr('type'));
  	if($(did).attr('type') == 'radio') {		
  		var radioname = skipOption.depends;
		switch(skipOption.operator){
			//evaluate the condition according to the specified operator
			case 'eq':
				if ($('#'+formId+' [name*="'+radioname+'"][type=radio]:checked').val() == skipOption.condition){

					return 1;
				}else{
					return 0;
				}
				break;
			case 'neq':
				if ($('#'+formId+' [name*="'+radioname+'"][type=radio]:checked').val() != skipOption.condition){
					return 1;
				}else{
					return 0;
				}
				break;
			case 'contains':
				patt = new RegExp(skipOption.condition,'i');
				if (patt.test($('#'+formId+' [name*="'+radioname+'"][type=radio]:checked').val())){
					return 1;
				}else{
					return 0;
				}
				break;
			case 'always':
				return 1;
				break;
			default:
				//if no operator is specified, use the equals operator
				if ($('#'+formId+' [name*="'+radioname+'"][type=radio]:checked').val() == skipOption.condition){
					return 1;
				}else{
					return 0;
				}
				break;
		}	
  }
	
  else if($(did).attr('type') == 'checkbox') {		
  var checkname = skipOption.depends;
	switch(skipOption.operator){
	//evaluate the condition according to the specified operator
	case 'eq':
		if(debugProgressPro) console.log('compare  '+checkname+' value '+$('#'+formId+' [name*="'+checkname+'"][type=checkbox]:checked').val()+' to '+skipOption.condition);
		if ($('#'+formId+' [name*="'+checkname+'"][type=checkbox]:checked').val() == skipOption.condition){
			return 1;
		}else{
			return 0;
		}
		break;
	case 'neq':
		if ($('#'+formId+' [name*="'+checkname+'"][type=checkbox]:checked').val() != skipOption.condition){
			return 1;
		}else{
			return 0;
		}
		break;
	case 'always':
		return 1;
		break;
	default:
		//if no operator is specified, use the equals operator
		if ($('#'+formId+' [name*="'+checkname+'"][type=checkbox]:checked').val() == skipOption.condition){
			return 1;
		}else{
			return 0;
		}
		break;
	}	
	
  }	
	
	
  else{
  	
	switch(skipOption.operator){
	//evaluate the condition according to the specified operator
	case 'eq':
		if ($(did).val() == skipOption.condition){
			
			return 1;
		}else{
			return 0;
		}
		break;
	case 'neq':
		if ($(did).val() != skipOption.condition){
			return 1;
		}else{
			return 0;
		}
		break;
	case 'contains':
		patt = new RegExp(skipOption.condition,'i');
		if (patt.test($(did).val())){
			return 1;
		}else{
			return 0;
		}
		break;
	/* FERRY GIJZEL - ADDED INARRAY OPTION */	
	case 'inarray':
		if(jQuery.inArray($(did).val(), skipOption.condition)!==-1){
			return 0;
		}else{
			return 1;
		}
		break;		
	case 'always':
		return 1;
		break;
	default:
//if no operator is specified, use the equals operator
		if ($(did).val() == skipOption.condition){
			return 1;
		}else{
			return 0;
		}
		break;
	}
  }
}

function skipField(formId, fieldname){

	// CHECK IF THE FORM NAME HAS "[]" APPENDED TO IT FOR MULTIPLE SE
	if($('#'+formId+' [name="'+fieldname+'[]"]').length > 0)
		{
			if(debugProgressPro) console.log('hiding array field '+fieldname+'[]');
			$('#'+formId+' div:has([name="'+fieldname+'[]"])').hide();
		}
	else
		{
			if(debugProgressPro) console.log('hiding field '+fieldname);
			$('#'+formId+' div:has([name="'+fieldname+'"])').hide();
		}
	
	// FERRY GIJZEL - DON'T REMOVE RULES
	//$('#'+formId+' [name="'+fieldname+'"]').rules('remove');
}

function skipIfNotShown(formId, sinsskipOptions, fieldname){
	//hide the field unless any "show" condition exists and is true
	var showThis = 0;
	for (x in sinsskipOptions){
		if (x == fieldname){
			var ruleset = sinsskipOptions[x];
			for (y in ruleset){
				if(ruleset[y].action == 'show'){
					if (skipCondition(formId, ruleset[y])) showThis = 1;
				}
			}
		}
	}
	if(showThis){
		return 0;
	}else{
		skipField(formId, fieldname);
		return 1;
	}
}

function skipIfHidden(formId, sihskipOptions, fieldname){
	//hide this field if it has a "hide" rule, unless there is
	//a "show" rule (show rules take priority)

	if(debugProgressPro) console.log('calling skipIfHidden for field '+fieldname);
		var hideThis = 0;	
		for (x in sihskipOptions){

			if (x == fieldname){
				var ruleset = sihskipOptions[x];
				for (y in ruleset){
					if(ruleset[y].action == 'hide'){
						if (skipCondition(formId, ruleset[y])) hideThis = 1;
					}
				}
			}
		}
		if(hideThis){
			skipIfNotShown(formId, sihskipOptions, fieldname);
			return 1;
		}else{
			return 0;
		}
	}

	function proProgress(formId, sd, ad, mySkipOptions, formFields) {
		var newSkipOptions = new Array();
		$.extend(true, newSkipOptions, mySkipOptions);
		nfields = formFields.length;
		if(debugProgressPro) console.log('calling proProgress, nfields='+nfields+' sd = '+sd+' ad = '+ad+' Skip options:');
		if(debugProgressPro) console.dir(mySkipOptions);
		var n=0;
		//first make sure all fields are shown, then hide them.
		for(i in formFields){
			
			if($('#'+formId+' [name="'+formFields[i]+'[]"]').length > 0)
				{
					if(debugProgressPro) console.log('showing array field '+formFields[i]+'[]');
					$('#'+formId+' div:has([name="'+formFields[i]+'[]"])').show();
				}
			else
				{
					if(debugProgressPro) console.log('showing field '+formFields[i]);
					$('#'+formId+' div:has([name="'+formFields[i]+'"])').show();
				}		
		}
		 
	
		// leave Always Display (ad) questions at the top even if answered and count unanswered questions
		for(i=0;i<ad;i++){
			if($('#'+formId+' [name="'+formFields[i]+'"]').val()=='' || $('#'+formId+' [name="'+formFields[i]+'[]"]').val()==null)n++;
		}

		for(i=ad;i<nfields;i++){
			// for the remaining fields, if the field is prefilled, skip unless "show" condition is true
			// FIRST SET A TEMPORARY FIELD NAME TO GET AROUND FORM FIELDS WITH MULTIPLE SELECTION OPTIONS ([])
			if($('#'+formId+' [name="'+formFields[i]+'[]"]').length > 0)
					{
						var tempFieldName=formFields[i].concat("[]");
					}
				else
					{
						var tempFieldName=formFields[i];
					}
	
			// IF PREFILLED, HIDE
			// ADD EXCEPTION FOR COUNTRY WHICH IS PREFILLED USING A GEO LOOKUP
			if(($('#'+formId+' [name="'+tempFieldName+'"]').val()!='' && $('#'+formId+' [name="'+tempFieldName+'"]').val()!=null) || ($('#'+formId+' [name="'+tempFieldName+'"]').prop('checked')==true || $('#'+formId+' [name="'+tempFieldName+'"]').attr('checked')==true )) 
				{
					if(!skipIfNotShown(formId, mySkipOptions, formFields[i])) n++;
				}
			else
				{
					// FOR UP TO 'sd' EMPTY FIELDS, ONLY HIDE THE ONES THAT HAVE A "hide" CONDITION FOR UP TO n FIELDS
					if (n < sd)
						{
							var thisOption = 0;
							// CHECK IF THE FIELD IS SUPPOSED TO BE HIDDEN
							for (x in mySkipOptions) 
								{
									if (x == formFields[i]) {thisOption = 1;}
								}
							// IF THE FIELD IS IN THE SKIPOPTIONS ARRAY, HIDE IT
							if(thisOption)
								{
									if(!skipIfHidden(formId, mySkipOptions, formFields[i]))
										{
											n++;
											// if this field is changed (the question is answered), show it on subsequent iterations.
											// if an answered field disappears, it is confusing to the visitor, and will make them answer more questions.
											$('#'+formId+' [name="'+tempFieldName+'"]').change(function(){
												var thisfieldname = $(this).attr('name');
												newSkipOptions[thisfieldname] = {1: {action: 'show', depends: '', operator: 'always', condition: ''}};
											});
										}
								}
							else
								{
									//since this field does not have a skip option, set it to always show on subsequent iterations
									n++; 
									newSkipOptions[formFields[i]] = {1: {action: 'show', depends: '', operator: 'always', condition: ''}};
								}
						}
					else
						{
							if(!skipIfNotShown(formId, mySkipOptions, formFields[i])) n++;
						}
					}
			}
	
		//if the form is completely filled out and progressProAutoSubmit is true, auto-submit the form for convenience
		if(debugProgressPro) console.log('number of open fields: '+n);
		if (n == 0 && progressProAutoSubmit){ 
			$('#'+formId).submit();
		}
	
		return newSkipOptions;
	}

function progressiveProfile(sd, ad, formId, formFields, popFields, elqDLKey_Cookie, elqDLKey_Email, emailField, validationOptions, skipOptions) {
//user-called function
//arguments:
//		sd: total number of unanswered questions to ask
//		ad: questions at the top of the form to always show even if answered
//		formId: the id of the progressive profiling form
//		formFields: an array form field names - these should be the same as the corresponding Eloqua database field name if there is one
//		popFields: an array of form field names that are to be pre-populated. These must correspond to an Eloqua database field name.
//		validationOptions: array containing options for jquery validation plugin, see http://docs.jquery.com/Plugins/Validation/
//		skipOptions: optional array of advanced skip/show rules -- for each field (indexed by the field names), specify these options:
//			action: "hide" or "show" the field if condition is true
//			depends: name of the field the value of which this rule depends on
//			operator: "eq" for equal to, "neq" for not equal to, "contains" or "always" (perform the action in all cases)
//			condition: value of "depends" field to conditionally evaluate
//				in other words, perform "action" on this field if the field "depends" (equals, does not equal, or contains) the value "condition"
//				example: {'C_AnyField':{action:'hide',depends:'C_MyField',operator:'neq',condition:'HR'},'C_AnotherField':{action:'hide',depends:'C_MyField',operator'eq',condition:'HR'}}
//					meaning hide field C_AnyField if field C_MyField is not "HR", and hide field C_AnotherField if field 'C_MyField' is "HR" 
    if(debugProgressPro) console.log('progressiveProfile called, skip options: ');
    if(debugProgressPro) console.dir(skipOptions);
    
	oldValOptions = new Array();
    oldSkipOptions = new Array();
//deep copy validation and skip options so they can be reset if necessary
	$.extend(true, oldValOptions, validationOptions);
	$.extend(true, oldSkipOptions, skipOptions);
//validate the form using jquery.validate according to validationOptions
	$('#' + formId).validate(validationOptions);
	if(debugProgressPro) console.dir(validationOptions);
//call proProgress to skip fields as specified and set new skip options so that the same fields are shown on subsequent iterations
    if(debugProgressPro) console.log('calling proProgress, old skip options:');
    if(debugProgressPro) console.dir(oldSkipOptions);
	skipOptions = proProgress(formId, sd, ad, oldSkipOptions,formFields);	
	
//if one of the "depends" fields in skipOptions changes, we need to re-process the form according to the new value of the field
//first determine which unique fields are specified as "depends" fields in skipOptions
	var uniqueDependFields = new Array();
	var unique = 1;
	for (m in skipOptions){
		for (n in skipOptions[m]){
			var d = skipOptions[m][n].depends;
			unique = 1;
			for(i in uniqueDependFields) {
				if (uniqueDependFields[i]==d) unique = 0;
			}
			if(unique==1 && d != '' && d != emailField) uniqueDependFields.push(d);
		}
	}
//for each unique "depends" field, re-process the form if the field is changed
	for (i in uniqueDependFields){
		d = uniqueDependFields[i];
		
	  if ($('#'+formId+' [name="'+d+'"]').attr('type') == 'radio') {
		$('#'+formId+' input[name="'+d+'"]').change(function() {

			
//continue to show the "depends" field even if other rules might hide it -- hiding it now would confuse the visitor
//determine which field just changed:
			var chNum = $(this).attr('name');
 			skipOptions[chNum] = {1: {action: 'show', depends: '', operator: 'always', condition: ''}};
//re-process the form, updating the skipOptions again
			skipOptions = proProgress(formId, sd, ad, skipOptions, formFields);		
		});						
	  }else{
		$('#'+formId+' [name="'+d+'"]').change(function() {
			if(debugProgressPro) console.log('field changed');
		
//continue to show the "depends" field even if other rules might hide it -- hiding it now would confuse the visitor
//determine which field just changed:
			var chNum = $(this).attr('name');
 			skipOptions[chNum] = {1: {action: 'show', depends: '', operator: 'always', condition: ''}};
//re-process the form, updating the skipOptions again
			skipOptions = proProgress(formId, sd, ad, skipOptions, formFields);		
		});
	  }
	}
}